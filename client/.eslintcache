[{"/home/james/Contact-List/client/src/index.js":"1","/home/james/Contact-List/client/src/App.js":"2","/home/james/Contact-List/client/src/components/layout/Navbar.js":"3","/home/james/Contact-List/client/src/components/pages/Home.js":"4","/home/james/Contact-List/client/src/components/pages/About.js":"5","/home/james/Contact-List/client/src/context/contact/ContactState.js":"6","/home/james/Contact-List/client/src/context/contact/contactContext.js":"7","/home/james/Contact-List/client/src/context/contact/contactReducer.js":"8","/home/james/Contact-List/client/src/context/types.js":"9","/home/james/Contact-List/client/src/components/contacts/Contacts.js":"10","/home/james/Contact-List/client/src/components/contacts/ContactItem.js":"11","/home/james/Contact-List/client/src/components/contacts/ContactForm.js":"12","/home/james/Contact-List/client/src/components/contacts/ContactFilter.js":"13"},{"size":199,"mtime":1608475611203,"results":"14","hashOfConfig":"15"},{"size":749,"mtime":1608485676985,"results":"16","hashOfConfig":"15"},{"size":774,"mtime":1608475611199,"results":"17","hashOfConfig":"15"},{"size":493,"mtime":1608587017094,"results":"18","hashOfConfig":"15"},{"size":429,"mtime":1608475611201,"results":"19","hashOfConfig":"15"},{"size":2998,"mtime":1608585791570,"results":"20","hashOfConfig":"15"},{"size":259,"mtime":1608485676988,"results":"21","hashOfConfig":"15"},{"size":1558,"mtime":1608585740423,"results":"22","hashOfConfig":"15"},{"size":460,"mtime":1608485676990,"results":"23","hashOfConfig":"15"},{"size":1164,"mtime":1608587914513,"results":"24","hashOfConfig":"15"},{"size":1813,"mtime":1608578200310,"results":"25","hashOfConfig":"15"},{"size":3805,"mtime":1608584515140,"results":"26","hashOfConfig":"15"},{"size":1079,"mtime":1608586948238,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1fazpl9",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},"/home/james/Contact-List/client/src/index.js",[],["57","58"],"/home/james/Contact-List/client/src/App.js",[],"/home/james/Contact-List/client/src/components/layout/Navbar.js",[],"/home/james/Contact-List/client/src/components/pages/Home.js",[],"/home/james/Contact-List/client/src/components/pages/About.js",[],"/home/james/Contact-List/client/src/context/contact/ContactState.js",[],"/home/james/Contact-List/client/src/context/contact/contactContext.js",[],"/home/james/Contact-List/client/src/context/contact/contactReducer.js",["59"],"/home/james/Contact-List/client/src/context/types.js",[],"/home/james/Contact-List/client/src/components/contacts/Contacts.js",[],"/home/james/Contact-List/client/src/components/contacts/ContactItem.js",[],"/home/james/Contact-List/client/src/components/contacts/ContactForm.js",["60"],"// Import React package & hooks\nimport React, { useContext, useState, useEffect } from 'react'\n// Import contact conetext tp access contact state globally\nimport ContactContext from '../../context/contact/contactContext';\nimport { CLEAR_CURRENT } from '../../context/types';\n\n\nconst ContactForm = () => {\n  // Initialize contact context to access contact state\n  const contactContext = useContext(ContactContext);\n\n  // Destructor functions from contactContext\n  const { addContact, updateContact, clearCurrent, current } = contactContext;\n\n  // React hook will automatically load contact information to form based on \"current\" value\n  useEffect(()=>{\n    if(current !== null){\n      setContact(current);\n    }\n    else {\n      setContact({\n        name:'',\n        email:'',\n        phone:'',\n        type:'personal',\n      });\n    }\n  }, [contactContext, current]);\n\n  // Initialize useState hook and variables\n   // Setting a form in the useState() hook allows us not to have to create hook for each form field\n   const [contact, setContact] = useState({\n    name:'',\n    email:'',\n    phone:'',\n    type:'personal',\n  });\n\n  // Destruct form fields from contact variable in useState hook\n  const { name, email, phone, type } = contact;\n\n  // Function to update component level state with form values\n  const onChange =(e)=>{\n    setContact({...contact, [e.target.name]:e.target.value })\n  };\n\n  // Function to update global Application state with form values\n  const onSubmit =(e)=>{\n    // prevent fields from whipping input values\n    e.preventDefault();\n    // Check the value of the \"current\" key in contact context\n    if( current === null){\n      // if value is null, invoke addContact() to persist contact information\n      addContact(contact);\n    }\n    else {\n      // if value !null, invoke updateContact() to alter persisted contacts information\n      updateContact(contact);\n    }\n    // reset form fields to initial state, \" \"\n    clearAll();\n  };\n\n  // Function clear all form fields + set \"current\" = null\n  const clearAll = () =>{\n    clearCurrent();\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <h2 className='text-primary'>\n        {/* Form will conditionally render title based on state \"current\" value */}\n        { current ? 'Edit Contact' : 'Add Contact'}\n      </h2>\n      <input\n        type='text'\n        placeholder='name'\n        name='name'\n        value={name}\n        onChange={onChange}\n      />\n      <input\n        type='email'\n        placeholder='Email'\n        name='email'\n        value={email}\n        onChange={onChange}\n      />\n      <input\n        type='text'\n        placeholder='Phone'\n        name='phone'\n        value={phone}\n        onChange={onChange}\n      />\n      <h5>Contact Type</h5>\n        <input\n          type='radio'\n          name='type'\n          value='personal'\n          checked={type === 'personal'}\n          onChange={onChange}\n        /> Personal {''}\n        <input\n          type='radio'\n          name='type'\n          value='professional'\n          checked={type === 'professional'}\n          onChange={onChange}\n          />\n          {''} Professional\n        <div>\n          <input\n              className='btn btn-primary btn-block'\n              type='submit'\n              // Button will conditionally render text based on state \"current\" value\n              value={ current ? 'Update Contact' : 'Add Contact'}\n          />\n        </div>\n          {/* Form will conditionally render a clear button based on state \"current\" value  */}\n          { current &&\n            <div>\n              <button\n                className='btn btn-light btn-block'\n                onClick={clearAll}\n              >\n                Clear\n              </button>\n            </div>}\n    </form>\n  )\n}\n\nexport default ContactForm;\n","/home/james/Contact-List/client/src/components/contacts/ContactFilter.js",["61"],"// Import React package and hooks\nimport React, { useContext, useRef, useEffect } from 'react'\n// Import contact context to access contact state actions/variables\nimport ContactContext from '../../context/contact/contactContext'\n\nconst ContactFilter = () => {\n  // Initialize Contact context in component\n  const contactContext = useContext(ContactContext);\n  // Destructor actions/values from contactContext state\n  const { filterContacts, clearFilter, filtered } = contactContext;\n  // Initialize userRef value\n  const text = useRef('')\n\n  // Function to autmatically reset filter input filed to blank\n  useEffect(()=>{\n    if(filtered === null){\n      text.current.value = '';\n    }\n    else{}\n  }, [ ]);\n\n  // Function to filter contacts displayed by name or email\n  const onChange = e => {\n    if(text.current.value !== ''){\n      filterContacts(e.target.value)\n    }\n    else {\n      clearFilter();\n    }\n  };\n\n  return (\n    <form>\n      <input ref={text} type='text' placeholder='Filter Contacts...' onChange={onChange}/>\n    </form>\n  )\n}\n\nexport default ContactFilter;\n",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":13,"column":1,"nodeType":"68","endLine":63,"endColumn":4},{"ruleId":"69","severity":1,"message":"70","line":5,"column":10,"nodeType":"71","messageId":"72","endLine":5,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":20,"column":6,"nodeType":"75","endLine":20,"endColumn":9,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'CLEAR_CURRENT' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filtered'. Either include it or remove the dependency array.","ArrayExpression",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [filtered]",{"range":"82","text":"83"},[702,705],"[filtered]"]