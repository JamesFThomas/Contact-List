[{"/home/james/Contact-List/client/src/index.js":"1","/home/james/Contact-List/client/src/App.js":"2","/home/james/Contact-List/client/src/components/layout/Navbar.js":"3","/home/james/Contact-List/client/src/components/pages/Home.js":"4","/home/james/Contact-List/client/src/components/pages/About.js":"5","/home/james/Contact-List/client/src/context/contact/ContactState.js":"6","/home/james/Contact-List/client/src/context/contact/contactContext.js":"7","/home/james/Contact-List/client/src/context/contact/contactReducer.js":"8","/home/james/Contact-List/client/src/context/types.js":"9","/home/james/Contact-List/client/src/components/contacts/Contacts.js":"10","/home/james/Contact-List/client/src/components/contacts/ContactItem.js":"11","/home/james/Contact-List/client/src/components/contacts/ContactForm.js":"12","/home/james/Contact-List/client/src/components/contacts/ContactFilter.js":"13","/home/james/Contact-List/client/src/context/auth/AuthState.js":"14","/home/james/Contact-List/client/src/context/auth/authContext.js":"15","/home/james/Contact-List/client/src/context/auth/authReducer.js":"16","/home/james/Contact-List/client/src/components/auth/Register.js":"17","/home/james/Contact-List/client/src/components/auth/Login.js":"18"},{"size":199,"mtime":1608475611203,"results":"19","hashOfConfig":"20"},{"size":1562,"mtime":1608655629510,"results":"21","hashOfConfig":"20"},{"size":920,"mtime":1608656251162,"results":"22","hashOfConfig":"20"},{"size":493,"mtime":1608592418268,"results":"23","hashOfConfig":"20"},{"size":429,"mtime":1608475611201,"results":"24","hashOfConfig":"20"},{"size":3065,"mtime":1608652089197,"results":"25","hashOfConfig":"20"},{"size":259,"mtime":1608485676988,"results":"26","hashOfConfig":"20"},{"size":1558,"mtime":1608592418271,"results":"27","hashOfConfig":"20"},{"size":903,"mtime":1608652089198,"results":"28","hashOfConfig":"20"},{"size":1536,"mtime":1608592418266,"results":"29","hashOfConfig":"20"},{"size":1813,"mtime":1608592418264,"results":"30","hashOfConfig":"20"},{"size":3805,"mtime":1608592418262,"results":"31","hashOfConfig":"20"},{"size":1079,"mtime":1608592418261,"results":"32","hashOfConfig":"20"},{"size":2093,"mtime":1608652089192,"results":"33","hashOfConfig":"20"},{"size":216,"mtime":1608652089193,"results":"34","hashOfConfig":"20"},{"size":0,"mtime":1608652089193,"results":"35","hashOfConfig":"20"},{"size":1799,"mtime":1608656360040,"results":"36","hashOfConfig":"20"},{"size":1344,"mtime":1608656343332,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1fazpl9",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/james/Contact-List/client/src/index.js",[],["79","80"],"/home/james/Contact-List/client/src/App.js",[],"/home/james/Contact-List/client/src/components/layout/Navbar.js",[],"/home/james/Contact-List/client/src/components/pages/Home.js",[],"/home/james/Contact-List/client/src/components/pages/About.js",[],"/home/james/Contact-List/client/src/context/contact/ContactState.js",[],"/home/james/Contact-List/client/src/context/contact/contactContext.js",[],"/home/james/Contact-List/client/src/context/contact/contactReducer.js",["81"],"// Import variables from types.js\nimport {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  CLEAR_FILTER,\n  FILTER_CONTACTS\n} from '../types';\n\n\nexport default (state, action) =>{\n  switch(action.type){\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map(contact =>\n          contact.id === action.payload.id ? action.payload : contact\n        )\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(contact=>\n          // return the contact information that does NOT matches the given id\n          contact.id !== action.payload\n          )\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n      case FILTER_CONTACTS:\n        return {\n          ...state,\n          filtered: state.contacts.filter(contact => {\n            // create regular expression to match text entered in filter field\n            const regex = new RegExp(`${action.payload}`, 'gi');\n            // return contact names or emails that match regex\n            return contact.name.match(regex) || contact.email.match(regex);\n          })\n        };\n      case CLEAR_FILTER:\n        return {\n          ...state,\n          filtered: null\n      };\n      default:\n         return state;\n      };\n  }\n","/home/james/Contact-List/client/src/context/types.js",[],"/home/james/Contact-List/client/src/components/contacts/Contacts.js",[],"/home/james/Contact-List/client/src/components/contacts/ContactItem.js",[],"/home/james/Contact-List/client/src/components/contacts/ContactForm.js",["82"],"// Import React package & hooks\nimport React, { useContext, useState, useEffect } from 'react'\n// Import contact conetext tp access contact state globally\nimport ContactContext from '../../context/contact/contactContext';\nimport { CLEAR_CURRENT } from '../../context/types';\n\n\nconst ContactForm = () => {\n  // Initialize contact context to access contact state\n  const contactContext = useContext(ContactContext);\n\n  // Destructor functions from contactContext\n  const { addContact, updateContact, clearCurrent, current } = contactContext;\n\n  // React hook will automatically load contact information to form based on \"current\" value\n  useEffect(()=>{\n    if(current !== null){\n      setContact(current);\n    }\n    else {\n      setContact({\n        name:'',\n        email:'',\n        phone:'',\n        type:'personal',\n      });\n    }\n  }, [contactContext, current]);\n\n  // Initialize useState hook and variables\n   // Setting a form in the useState() hook allows us not to have to create hook for each form field\n   const [contact, setContact] = useState({\n    name:'',\n    email:'',\n    phone:'',\n    type:'personal',\n  });\n\n  // Destruct form fields from contact variable in useState hook\n  const { name, email, phone, type } = contact;\n\n  // Function to update component level state with form values\n  const onChange =(e)=>{\n    setContact({...contact, [e.target.name]:e.target.value })\n  };\n\n  // Function to update global Application state with form values\n  const onSubmit =(e)=>{\n    // prevent fields from whipping input values\n    e.preventDefault();\n    // Check the value of the \"current\" key in contact context\n    if( current === null){\n      // if value is null, invoke addContact() to persist contact information\n      addContact(contact);\n    }\n    else {\n      // if value !null, invoke updateContact() to alter persisted contacts information\n      updateContact(contact);\n    }\n    // reset form fields to initial state, \" \"\n    clearAll();\n  };\n\n  // Function clear all form fields + set \"current\" = null\n  const clearAll = () =>{\n    clearCurrent();\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <h2 className='text-primary'>\n        {/* Form will conditionally render title based on state \"current\" value */}\n        { current ? 'Edit Contact' : 'Add Contact'}\n      </h2>\n      <input\n        type='text'\n        placeholder='name'\n        name='name'\n        value={name}\n        onChange={onChange}\n      />\n      <input\n        type='email'\n        placeholder='Email'\n        name='email'\n        value={email}\n        onChange={onChange}\n      />\n      <input\n        type='text'\n        placeholder='Phone'\n        name='phone'\n        value={phone}\n        onChange={onChange}\n      />\n      <h5>Contact Type</h5>\n        <input\n          type='radio'\n          name='type'\n          value='personal'\n          checked={type === 'personal'}\n          onChange={onChange}\n        /> Personal {''}\n        <input\n          type='radio'\n          name='type'\n          value='professional'\n          checked={type === 'professional'}\n          onChange={onChange}\n          />\n          {''} Professional\n        <div>\n          <input\n              className='btn btn-primary btn-block'\n              type='submit'\n              // Button will conditionally render text based on state \"current\" value\n              value={ current ? 'Update Contact' : 'Add Contact'}\n          />\n        </div>\n          {/* Form will conditionally render a clear button based on state \"current\" value  */}\n          { current &&\n            <div>\n              <button\n                className='btn btn-light btn-block'\n                onClick={clearAll}\n              >\n                Clear\n              </button>\n            </div>}\n    </form>\n  )\n}\n\nexport default ContactForm;\n","/home/james/Contact-List/client/src/components/contacts/ContactFilter.js",["83"],"// Import React package and hooks\nimport React, { useContext, useRef, useEffect } from 'react'\n// Import contact context to access contact state actions/variables\nimport ContactContext from '../../context/contact/contactContext'\n\nconst ContactFilter = () => {\n  // Initialize Contact context in component\n  const contactContext = useContext(ContactContext);\n  // Destructor actions/values from contactContext state\n  const { filterContacts, clearFilter, filtered } = contactContext;\n  // Initialize userRef value\n  const text = useRef('')\n\n  // Function to autmatically reset filter input filed to blank\n  useEffect(()=>{\n    if(filtered === null){\n      text.current.value = '';\n    }\n    else{}\n  }, [ ]);\n\n  // Function to filter contacts displayed by name or email\n  const onChange = e => {\n    if(text.current.value !== ''){\n      filterContacts(e.target.value)\n    }\n    else {\n      clearFilter();\n    }\n  };\n\n  return (\n    <form>\n      <input ref={text} type='text' placeholder='Filter Contacts...' onChange={onChange}/>\n    </form>\n  )\n}\n\nexport default ContactFilter;\n","/home/james/Contact-List/client/src/context/auth/AuthState.js",["84","85","86","87","88","89","90","91","92"],"// Import React package with useReducer hook\nimport React, { useReducer } from 'react';\n// Import auth context instance\nimport AuthContext from './authContext';\n// Import auth context reduce function to update state values\nimport AuthReducer from './authReducer';\n// Import variables from types.js\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_ERRORS\n} from '../types';\n\nconst AuthState = (props) => {\n  // Create initial attributes for the authenticate state object\n  const initialState = {\n    // create key to hold web token\n    token: localStorage.getItem('token'),\n    // variable to indicate if user is authorized/logged in\n    isAuthenticated: null,\n    // key to indicate request in progress\n    loading: true,\n    // key to indicate presence of any returned errors\n    error: null,\n    // key to indicate current user\n    user: null\n  };\n\n  // Initialize useReducer hook to access contacts state values\n  const [state, dispatch] = useReducer(AuthReducer, initialState);\n\n                                            // Auth State Actions\n\n    // Load User - checks if a user is logged in\n    const loadUser = () =>{}\n\n    // Register User - sign user up and return token\n    const registerUser = () =>{}\n\n    // Login User - login user in and receive token\n    const loginUser = () =>{}\n\n    // Logout - will destroy user token\n    const logoutUser = () =>{}\n\n    // Clear Errors- will clear any returned errors\n    const clearErrors = () =>{}\n\n    // Return auth context provider element\n    return (\n      <AuthContext.Provider\n        // Set auth state & actions for access in app components\n        value={{\n          token:state.token,\n          isAuthenticated: state.isAuthenticated,\n          loading: state.loading,\n          user: state.user,\n          error: state.error,\n          loadUser,\n          registerUser,\n          loginUser,\n          logoutUser,\n          clearErrors\n        }}\n        >\n          {props.children}\n        </AuthContext.Provider>\n    )\n};\n\nexport default AuthState;","/home/james/Contact-List/client/src/context/auth/authContext.js",[],"/home/james/Contact-List/client/src/context/auth/authReducer.js",[],"/home/james/Contact-List/client/src/components/auth/Register.js",["93"],"/home/james/Contact-List/client/src/components/auth/Login.js",["94"],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":13,"column":1,"nodeType":"101","endLine":63,"endColumn":4},{"ruleId":"102","severity":1,"message":"103","line":5,"column":10,"nodeType":"104","messageId":"105","endLine":5,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":20,"column":6,"nodeType":"108","endLine":20,"endColumn":9,"suggestions":"109"},{"ruleId":"102","severity":1,"message":"110","line":9,"column":3,"nodeType":"104","messageId":"105","endLine":9,"endColumn":19},{"ruleId":"102","severity":1,"message":"111","line":10,"column":3,"nodeType":"104","messageId":"105","endLine":10,"endColumn":16},{"ruleId":"102","severity":1,"message":"112","line":11,"column":3,"nodeType":"104","messageId":"105","endLine":11,"endColumn":14},{"ruleId":"102","severity":1,"message":"113","line":12,"column":3,"nodeType":"104","messageId":"105","endLine":12,"endColumn":13},{"ruleId":"102","severity":1,"message":"114","line":13,"column":3,"nodeType":"104","messageId":"105","endLine":13,"endColumn":16},{"ruleId":"102","severity":1,"message":"115","line":14,"column":3,"nodeType":"104","messageId":"105","endLine":14,"endColumn":13},{"ruleId":"102","severity":1,"message":"116","line":15,"column":3,"nodeType":"104","messageId":"105","endLine":15,"endColumn":9},{"ruleId":"102","severity":1,"message":"117","line":16,"column":3,"nodeType":"104","messageId":"105","endLine":16,"endColumn":15},{"ruleId":"102","severity":1,"message":"118","line":35,"column":17,"nodeType":"104","messageId":"105","endLine":35,"endColumn":25},{"ruleId":"102","severity":1,"message":"119","line":22,"column":9,"nodeType":"104","messageId":"105","endLine":22,"endColumn":17},{"ruleId":"102","severity":1,"message":"119","line":20,"column":9,"nodeType":"104","messageId":"105","endLine":20,"endColumn":17},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'CLEAR_CURRENT' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filtered'. Either include it or remove the dependency array.","ArrayExpression",["122"],"'REGISTER_SUCCESS' is defined but never used.","'REGISTER_FAIL' is defined but never used.","'USER_LOADED' is defined but never used.","'AUTH_ERROR' is defined but never used.","'LOGIN_SUCCESS' is defined but never used.","'LOGIN_FAIL' is defined but never used.","'LOGOUT' is defined but never used.","'CLEAR_ERRORS' is defined but never used.","'dispatch' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},"Update the dependencies array to be: [filtered]",{"range":"125","text":"126"},[702,705],"[filtered]"]